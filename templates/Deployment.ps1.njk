{% from 'Macros.html' import ProvisionSubSite, AddContentTypeToPagesLibrary, CustomCommand,Command,SetListDefaultContentType,AddPublishingPage,SetPublishingPageFields %}

. "{{getFilePath('functions.ps1')}}"

$spHost = "{{getAttr(template,'spHost','host')|default(spHost)}}";
{% set serverRelativeUrl = "/sites/" + getAttr(template,'url') %}
$spGlobalSiteServerRelativeUrl = "sites/{{getAttr(template,'url')|default(url)}}";
$siteUrl = ($spHost + $spGlobalSiteServerRelativeUrl);

$title = "Actions"
$message = "What would you like to do?"

Write-Log "Running Fields and Content Types initialisation script"
Confirm-Continue -message "Deploy content types and fields to $siteUrl. Press y to continue"

Write-Log "Connecting to $siteUrl"

{% for command in getAttr(template,'preConnectCommands') %}
    
    {{Command(command)}}

{% endfor %}

Connect-PnPOnline -Url $siteUrl -UseWebLogin

{% for command in getAttr(template,'postConnectCommands') %}
    
    {{Command(command)}}

{% endfor %}

{% if getAttr(template,'setSiteCollectionTermGroupName') and getAttr(template,'siteCollectionGroupName') %}
Set-SiteCollectionTermGroupName "{{getAttr(template,'siteCollectionGroupName')}}"
{% endif %}

Write-Log "Provisioning Fields and Content Types"

Set-PnPTraceLog -On -Level Debug

{% for command in getAttr(template,'preProvisiongCommands') %}
    
{{Command(command)}}

{% endfor %}

Write-Log "Applying SiteCollection Provisioning..."

Apply-PnPProvisioningTemplate -Path "{{getFilePath('sitecollection-'+getAttr(template,'id')+'-'+postfix+'.xml')}}"

Write-Host "Disabling SiteAssets versioning..."

$siteAssetsList = Get-PnPList -Identity SiteAssets

$siteAssetsList.EnableVersioning = $false

$siteAssetsList.Update()

$siteAssetsList.Context.ExecuteQuery()

Write-Host "Adding content types to pages library" 

{% for ct in getAttr(template,'pagesLibraryContentTypes','pagesLibraryContentTypes') %}
Add-PnPContentTypeToList -List "Pages" -ContentType "{{ct}}"  
{% endfor %}

Write-Host "Setting default content type on pages library" 

{% if getAttr(template,'defaultPagesContentType','pagesLibraryDefaultContentType','pagesContentType') %}
Set-PnPDefaultContentTypeToList -List "Pages" -ContentType "{{getAttr(template,'defaultPagesContentType','pagesLibraryDefaultContentType','pagesContentType')}}"
{% endif %}

Write-Host "Updating page library fieldss settings"

{% if hasAttr(template,'pagesFieldsSettings','pagesFieldSettings') %}
    {% for fieldName,fieldSettings in getAttr(template,'pagesFieldsSettings','pagesFieldSettings') %}
        $dict = @{}
        {% for settingKey, settingValue in fieldSettings %}
            {% if settingKey == 'indexed' or settingKey == 'Indexed' %}
            $dict["Indexed"] = {% if settingValue %}$true{% else %}$false {% endif %}

            {% elif settingKey == 'enforceUniqueValues' or settingKey == 'unique' or settingKey == 'EnforceUniqueValues' %}

            $dict["EnforceUniqueValues"] = {% if settingValue %}$true{% else %}$false {% endif %}

            {% elif settingKey == 'required' or settingKey == 'Required' %}

            $dict["Required"] = {% if settingValue %}$true{% else %}$false {% endif %}

            {% else %} 
            $dict["{{vkey}}"] = {{getPowershellValue(vvalue)}}

            {% endif %}
        {% endfor %}

        Set-PnPField -Identity "{{fieldName}}" -List "Pages" -Values $dict   

    {% endfor %}
{% endif %}


Write-Host "Updating lists security and fields" 

{% for list in getAttr(template,'lists') %}
    {% if hasAttr(list,'readSecurity') or hasAttr(list,'writeSecurity') %}
    $list = Get-PnPList -Identity "{{getAttr(list,'title')}}" -Includes ReadSecurity,WriteSecurity
    if ($list -ne $null){
        {% if hasAttr(list,'readSecurity') %}
        $list.ReadSecurity = {{getAttr(list,'readSecurity')}}
        {% endif %}
        {% if hasAttr(list,'writeSecurity') %}
        $list.WriteSecurity = {{getAttr(list,'writeSecurity')|default(2)}}
        {% endif %}
        $list.Update() 
        $list.Context.ExecuteQuery() 
    }
    {% endif %}
    {% if hasAttr(list, 'fieldDefs', 'fieldDefinitions') %}

        [System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SharePoint.Client")

        $list = Get-PnPList -Identity "{{getAttr(list,'title')}}" 

        $listContentTypes = $list.ContentTypes

        $list.Context.Load($listContentTypes); 

        $list.Context.ExecuteQuery()  

        foreach ($ct in $listContentTypes){

            $links = $ct.FieldLinks 

            $list.Context.Load($links)

            $list.Context.ExecuteQuery(); 
        } 

        {% for def in getAttr(list, 'fieldDefs', 'fieldDefinitions') %}

            {% if def.addToContentTypes %}

                $field = Get-PnPField -List "{{getAttr(list,'title')}}" -Identity "{{def.name}}"
                
                {% for item in def.addToContentTypes %}
                
                foreach ($ct in $listContentTypes){
                    $links = $ct.FieldLinks 
                    if ($ct.Name -eq "{{item}}")
                    {
                        $found = $false 

                        foreach($link in $links){
                            if ($link.Name -eq "{{def.name}}")
                            {
                                $found = $true 
                            }
                        }

                        if ($found -ne $true)
                        {
                            $link = new-object Microsoft.SharePoint.Client.FieldLinkCreationInformation

                            $link.Field = $field 

                            $ct.FieldLinks.Add($link) 

                            $ct.Update($false)
                            
                            $list.Context.ExecuteQuery() 
                        }
                    }
                } 

                {% endfor %}

            {% endif %}

        {% endfor %}

    {% endif %}
    {% if hasAttr(list,'fieldsSettings','fieldSettings') %}
        {% for fieldName,fieldSettings in getAttr(list,'fieldsSettings','fieldSettings') %}
            $dict = @{}
            {% for settingKey, settingValue in fieldSettings %}
                {% if settingKey == 'indexed' or settingKey == 'Indexed' %}

                $dict["Indexed"] = {% if settingValue %}$true{% else %}$false {% endif %}

                {% elif settingKey == 'enforceUniqueValues' or settingKey == 'unique' or settingKey == 'EnforceUniqueValues' %}

                $dict["EnforceUniqueValues"] = {% if settingValue %}$true{% else %}$false {% endif %}

                {% elif settingKey == 'required' or settingKey == 'Required' %}

                $dict["Required"] = {% if settingValue %}$true{% else %}$false {% endif %}

                {% else %} 

                $dict["{{vkey}}"] = {{getPowershellValue(vvalue)}}

                {% endif %}

            {% endfor %}

            Set-PnPField -Identity "{{fieldName}}" -List "{{getAttr(list,'title')}}" -Values $dict 
        {% endfor %}
    {% endif %}
{% endfor %}

{% for command in getAttr(template,'postProvisiongCommands') %}
    
{{Command(command)}}

{% endfor %}

{% if hasAttr(template,'homePage') %}

Set-PnPHomePage -RootFolderRelativeUrl "{{getAttr(template,'homePage')}}"

{% endif %}

{% if hasAttr(template,'defaultPageLayout') %}

Set-PnPDefaultPageLayout -Title "{{getAttr(template,'defaultPageLayout')}}"

{% endif %}

{% for app in getAttr(template,'apps') %}

Import-PnPAppPackage -Path "{{getAttr(app,'path')}}" {% if getAttr(app,'force') %}-Force {% else %} -LoadOnly {% endif %} 

{% endfor %}

{% if hasAttr(template,'pages') %}
    {% for page in getAttr(template,'pages') %}

    {{AddPublishingPage(getAttr(page,'name','title'),getAttr(page,'layout','pageLayout'),getAttr(page,'title','name'),getAttr(page,'publish'),getAttr(page,'folder'),getAttr(page,'meta'))}}

    {{SetPublishingPageFields(getAttr(page,'meta'),serverRelativeUrl,getAttr(page,'name'))}}

    {% endfor %}
{% endif %}

{% if getAttr(template,'isLocalized','isLocalised') %}

Confirm-Continue -message "This site collection supportes localization, have you created the variations hierarchy in the site settings?. Press y to continue"

{% endif %}

Confirm-Continue -message "Do you want to deploy subsites?. Press y to continue"

$ctx = Get-PnPContext 

$web = $ctx.Web 

$rootWeb = Get-PnPWeb 


{% for s in template.subsites %}
    {% if getAttr(s,'parentWeb') == 'root' or getAttr(s,'parentWeb') == '/' or not hasAttr(s,'parentWeb') %}
    Write-Host "Provisioning subsite {{getAttr(s,'title')}} on the root web"
    {{ProvisionSubSite(s)}}
    {% endif %}

{% endfor %}

{% for s in template.subsites %}
    {% if getAttr(s,'parentWeb') == 'root' or getAttr(s,'parentWeb') == '/' or not hasAttr(s,'parentWeb') %}
    {% else %}
    Write-Host "Provisioning subsite {{getAttr(s,'title')}} on {{getAttr(s,'parentWeb')}}"
    {{ProvisionSubSite(s)}}
    {% endif %}

{% endfor %}


# Write-Log "Disconnecting..."
Disconnect-PnPOnline